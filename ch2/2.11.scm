(load "2.10.scm")

(define (mul-interval x y)
  (define non-negative? (lambda (x) (not (negative? x))))
  (let ((xl (lower-bound x))
        (xu (upper-bound x))
        (yl (lower-bound y))
        (yu (upper-bound y)))
    (cond ((and (negative? xl)
                (negative? xu)
                (negative? yl)
                (negative? yu))
           (make-interval (* xu yu) (* xl yl)))
          ((and (negative? xl)
                (non-negative? xu)
                (negative? yl)
                (negative? yu))
           (make-interval (* xu yl) (* xl yl)))
          ((and (non-negative? xl)
                (non-negative? xu)
                (negative? yl)
                (negative? yu))
           (make-interval (* xu yl) (* xl yu)))
          ((and (negative? xl)
                (negative? xu)
                (negative? yl)
                (non-negative? yu))
           (make-interval (* xl yu) (* xl yl)))
          ((and (negative? xl)
                (non-negative? xu)
                (negative? yl)
                (non-negative? yu))
           (make-interval
            (min (* xu yl) (* xl yu))
            (max (* xl yl) (* xu yu))))
          ((and (non-negative? xl)
                (non-negative? xu)
                (negative? yl)
                (non-negative? yu))
           (make-interval (* xu yl) (* xu yu)))
          ((and (negative? xl)
                (negative? xu)
                (non-negative? yl)
                (non-negative? yu))
           (make-interval (* xl yu) (* xu yl)))
          ((and (negative? xl)
                (non-negative? xu)
                (non-negative? yl)
                (non-negative? yu))
           (make-interval (* xl yu) (* xu yu)))
          ((and (non-negative? xl)
                (non-negative? xu)
                (non-negative? yl)
                (non-negative? yu))
           (make-interval (* xl yl) (* xu yu)))
          (else
           (error "You should not be here")))))
